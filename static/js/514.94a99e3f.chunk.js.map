{"version":3,"file":"static/js/514.94a99e3f.chunk.js","mappings":"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","sources":["components/Shine/RegistrationShine.tsx","pages/login/LoginFormButton.tsx","pages/login/LoginInputs.tsx","pages/login/Login.tsx"],"sourcesContent":["import { RegistrationShineProps } from './Shines.types';\n\nexport const RegistrationShine: React.FC<RegistrationShineProps> = ({\n  windowSize,\n  isThemeDark,\n}) => {\n  const formWidthClass: string = windowSize.height > 440 ? 'block' : 'hidden';\n  return (\n    <div className={`${formWidthClass}`}>\n      <div\n        className={`${\n          isThemeDark ? 'top-52 right-12' : 'top-32 left-12'\n        } w-full  max-w-[280px] pointer-events-none h-full max-h-96 bg-transparent bg-opacity-50  overflow-hidden rounded-lg blur-3xl absolute   md:hidden `}\n      >\n        <div\n          className={`${\n            isThemeDark\n              ? 'from-transparent   to-violet-800 '\n              : 'from-transparent   to-amber-300 '\n          } absolute bottom-0 w-full h-full  max-w-[580px] max-h-[480px] transform \n        -translate-x-1/2 pointer-events-none -translate-y-1/2 bg-gradient-to-b from-transparent\n          rounded-full animate-shine blur-3xl`}\n        ></div>\n      </div>\n\n      <div\n        className={`${\n          isThemeDark ? 'top-10 left-2' : 'top-52  right-12'\n        } w-full  max-w-[180px] pointer-events-none h-full max-h-96 bg-transparent bg-opacity-50  overflow-hidden rounded-lg blur-3xl absolute  md:-z-10`}\n      >\n        <div\n          className={`${\n            isThemeDark\n              ? 'from-transparent   to-cyan-700 '\n              : 'from-transparent   to-amber-500 '\n          } absolute bottom-0 w-full h-full  max-w-[580px] max-h-[480px] transform \n        -translate-x-1/2 -translate-y-1/2 bg-gradient-to-b from-transparent\n          rounded-full pointer-events-none animate-shine blur-3xl`}\n        ></div>\n      </div>\n    </div>\n  );\n};\n","import { PulseLoader } from 'react-spinners';\nimport { LoginFormButtonProps } from './Login.types';\n\nexport const LoginFormButton: React.FC<LoginFormButtonProps> = ({\n  windowSize,\n  text,\n  isLoading,\n  isThemeDark,\n}) => {\n  //styles for btn\n  const themeStyles: string = `\n  ${windowSize.height > 460 ? 'md3:mt-24' : 'md3:mt-4  '} \n  ${\n    isThemeDark\n      ? 'shadow-none hover:bg-buttonHoverColorDark text-buttonTextColorDark hover:text-lightPartsColorDark bg-buttonColorDark'\n      : 'shadow-shadowBox hover:bg-buttonHoverColor text-buttonTextColor bg-buttonColor'\n  } \n     text-center text-lg md:w-48 font-light w-40 h-11 rounded-sm border-none outline-none \n      mx-auto cursor-pointer shadow-md mt-28 mb-8 flex items-center justify-around transition-all duration-300 \n      ssm:w-40 ssm:h-10 md2:text-sm `;\n\n  return (\n    <button type=\"submit\" disabled={isLoading} className={themeStyles}>\n      {isLoading ? (\n        <PulseLoader\n          color={`${isThemeDark ? '#3f78cc ' : '#F5DEB3 '}`}\n          size=\"6px\"\n        />\n      ) : (\n        <>{text}</>\n      )}\n    </button>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { changeUserEmail } from '../../redux/auth/slice-auth';\nimport { getUserData } from '../../redux/auth/selectors-auth';\nimport { useTheme } from '../../helpers/hooks/theme-hook';\nimport { PiEyeClosedBold } from 'react-icons/pi';\nimport { HiMiniEye } from 'react-icons/hi2';\nimport { setShowPass } from '../../redux/theme/themeReducer';\nimport { LoginInputsProps } from './Login.types';\n\nexport const LoginInputs: React.FC<LoginInputsProps> = ({\n  windowSize,\n  isThemeDark,\n}) => {\n  const { showPassword } = useTheme();\n  const dispatch = useDispatch();\n  const user = useSelector(getUserData);\n\n  //by the way better to leave it here with use state\n  //Im not shure need I set it in LS or not that why its with redux\n  const togglePasswordVisibility = () => {\n    dispatch(setShowPass());\n  };\n\n  //setting email to LS\n  const handleInputEmailChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    const value = event.target.value;\n    dispatch(changeUserEmail(value));\n  };\n\n  //resize styles\n  const formWidthClass = windowSize.height > 460 ? 'md3:mt-9' : 'md3:mt-0';\n\n  return (\n    <>\n      <label\n        className={`\n        ${formWidthClass}\n        mt-9 text-xl flex items-center gap-2 md:ml-2 \n      md2:text-sm font-light sm:mt-1`}\n        htmlFor=\"userEmail\"\n      >\n        {' '}\n        Email{' '}\n      </label>\n      <input\n        onChange={handleInputEmailChange}\n        className={`\n        ${\n          isThemeDark\n            ? ' text-darkFontDark bg-sky-900 placeholder:text-darkFontDark '\n            : ' text-darkFont bg-lightPartsColor placeholder:text-darkFont '\n        }  mx-auto w-full py-1 rounded-sm px-5  h-12 \n          border-0 outline-none   \n           placeholder:font-base\n             md:h-10 text-xl md:py-0.5 md:px-2 placeholder:opacity-50 \n           ssm:text-base  font-light  transition-all  2xl2:text-2xl`}\n        type=\"email\"\n        name=\"userEmail\"\n        id=\"userEmail\"\n        placeholder=\"Balambino@mail.com\"\n        value={user.email || ''}\n        required\n      />\n      <label\n        className={`mt-2 text-xl flex items-center gap-2 md:ml-2 \n      md2:text-sm font-light sm:mt-1`}\n        htmlFor=\"userPassword\"\n      >\n        {' '}\n        Password{' '}\n      </label>\n      <div className=\"flex\">\n        <input\n          className={`${\n            isThemeDark\n              ? ' text-darkFontDark bg-sky-900 placeholder:text-darkFontDark '\n              : ' text-darkFont bg-lightPartsColor placeholder:text-darkFont '\n          } mx-auto  py-1 px-5 rounded-l-sm h-12 \n          border-0 outline-none   \n           placeholder:font-base\n            md:h-10 text-xl md:py-0.5 md:px-2 placeholder:opacity-50 \n           ssm:text-base w-full  font-light  transition-all  2xl2:text-2xl`}\n          type={`${!showPassword ? 'password' : 'text'}`}\n          name=\"userPassword\"\n          id=\"userPassword\"\n          placeholder=\"Enter your password\"\n          min={7}\n          required\n        />\n        <button\n          className={`${\n            isThemeDark\n              ? ' text-darkFontDark bg-sky-900 placeholder:text-darkFontDark '\n              : ' text-darkFont bg-lightPartsColor placeholder:text-darkFont '\n          } rounded-r-sm w-12 transition-all`}\n          type=\"button\"\n          onClick={togglePasswordVisibility}\n        >\n          {showPassword ? <HiMiniEye /> : <PiEyeClosedBold />}\n        </button>\n      </div>\n    </>\n  );\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { LoginFormButton } from './LoginFormButton';\nimport { LoginInputs } from './LoginInputs';\nimport { RegistrationShine } from 'components/Shine/RegistrationShine';\nimport { login } from '../../redux/auth/operations-auth';\nimport { getTheme } from '../../redux/theme/theme-selectors';\nimport { getisLoadingUser } from '../../redux/auth/selectors-auth';\nimport { useEffect, useState, FormEvent } from 'react';\nimport { CredentialsLogin } from 'redux/auth/redux-auth.type';\nimport { Helmet } from 'react-helmet';\n\nconst Login: React.FC = () => {\n  const dispatch = useDispatch();\n  const isThemeDark: boolean = useSelector(getTheme);\n  const isLoading: boolean = useSelector(getisLoadingUser);\n  const [windowSize, setWindowSize] = useState<{\n    height: number;\n    width: number;\n  }>({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  });\n\n  const handleResize = (): void => {\n    setWindowSize({\n      width: window.innerWidth,\n      height: window.innerHeight,\n    });\n  };\n\n  useEffect(() => {\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  const handleSubmit = async (\n    evt: FormEvent<HTMLFormElement>\n  ): Promise<void> => {\n    evt.preventDefault();\n    const { userEmail, userPassword } = evt.currentTarget.elements as any;\n    const userData: CredentialsLogin = {\n      email: userEmail.value.trim(),\n      password: userPassword.value.trim(),\n    };\n\n    //what is correct way to\n    dispatch(login(userData) as any);\n    userPassword.value = '';\n  };\n\n  const formWidthClass =\n    windowSize.height > 460\n      ? 'md3:w-5/12 pb-12'\n      : 'md3:w-10/12   md2:mt-1 pb-1';\n  const formThemeStyles = isThemeDark\n    ? ' shadow-shadowBoxDark from-smallWraperGradient1Dark to-smallWraperGradient2Dark '\n    : ' from-smallWraperGradient1 shadow-shadowBox to-smallWraperGradient2 ';\n\n  return (\n    <>\n      <Helmet>\n        <title>StoneBook-Login</title>\n      </Helmet>\n      <form\n        onSubmit={handleSubmit}\n        autoComplete=\"off\"\n        className={`\n        ${formWidthClass} \n         ${formThemeStyles}  flex gap-2 flex-col   pt-20  px-10 rounded-sm\n          shadow-lg bg-gradient-to-tr md2:mt-4  md2:pt-8  md:pb-14 md:px-5 md:min-h-0 md:w-[96%]\n          transition-all  ssm2:-mt-4 ssm2:pt-28  mx-auto z-20 mt-2 `}\n      >\n        <h1 className=\"text-center text-4xl m-0 md:text-2xl md2:text-2xl font-normal mt-2\">\n          Login\n        </h1>\n        <LoginInputs windowSize={windowSize} isThemeDark={isThemeDark} />\n        <Link\n          className={` ${\n            isThemeDark ? 'text-teal-400 ' : 'text-teal-600 '\n          } mt-12 flex gap-4`}\n          to={'/registration'}\n        >\n          <p\n            className={`${isThemeDark ? 'text-darkFontDark' : 'text-darkFont'}`}\n          >\n            Have no account?\n          </p>\n          Registrate now\n        </Link>\n        <LoginFormButton\n          windowSize={windowSize}\n          text=\"Sign in\"\n          isLoading={isLoading}\n          isThemeDark={isThemeDark}\n        />\n      </form>\n      <RegistrationShine windowSize={windowSize} isThemeDark={isThemeDark} />\n    </>\n  );\n};\n\nexport default Login;\n"],"names":["RegistrationShine","windowSize","isThemeDark","formWidthClass","height","className","LoginFormButton","text","isLoading","themeStyles","type","disabled","PulseLoader","color","size","LoginInputs","showPassword","useTheme","dispatch","useDispatch","user","useSelector","getUserData","htmlFor","onChange","event","value","target","changeUserEmail","name","id","placeholder","email","required","min","onClick","setShowPass","getTheme","getisLoadingUser","useState","width","window","innerWidth","innerHeight","setWindowSize","handleResize","useEffect","addEventListener","removeEventListener","handleSubmit","evt","preventDefault","currentTarget","elements","userEmail","userPassword","userData","trim","password","login","formThemeStyles","Helmet","onSubmit","autoComplete","to"],"sourceRoot":""}